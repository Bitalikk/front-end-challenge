{"version":3,"sources":["components/Post/Post.module.css","components/PostEditor/PostEditor.module.css","components/PostsList/PostsList.module.css","components/Modal/Modal.module.css","components/Modal/Modal.js","components/PostEditor/PostEditor.js","components/PostsList/PostsList.js","redux/posts/postsActions.js","redux/posts/postsSelectors.js","components/PostsList/PostsListContainer.js","redux/posts/postsOperations.js","components/Post/Post.js","redux/comments/commentsActions.js","redux/comments/commentsSelectors.js","components/Post/PostContainer.js","redux/comments/commentsOperations.js","components/App.js","redux/posts/postsReducers.js","redux/comments/commentsReducers.js","redux/store.js","index.js"],"names":["module","exports","wrapper","postBody","commentList","commentItem","btnBack","btn","formContainer","inputContent","labelSelect","list","item","link","backdrop","modal","Modal","backdropRef","createRef","handleKeyPress","e","code","_this","props","onClose","handleBackdropClick","current","target","window","addEventListener","this","removeEventListener","children","react_default","a","createElement","className","css","ref","onClick","Component","TaskEditor","state","title","body","handleChange","_e$target","name","value","setState","Object","defineProperty","handleSubmit","preventDefault","onSave","objectSpread","reset","_this$state","onCancel","onSubmit","type","onChange","placeholder","cols","rows","defaultProps","PostsList","isCreating","openCreatePostModal","closeCreatePostModal","createPost","post","addPost","_this$props","_this$props$items","items","location","Fragment","map","key","id","react_router_dom","to","pathname","concat","from","Modal_Modal","PostEditor_TaskEditor","ActionType","FETCH_POSTS_REQUEST","FETCH_POSTS_SUCCESS","FETCH_POSTS_ERROR","FETCH_POST_WITH_COMMENTS_REQUEST","FETCH_POST_WITH_COMMENTS_SUCCESS","FETCH_POST_WITH_COMMENTS_ERROR","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_ERROR","EDIT_POST_REQUEST","EDIT_POST_SUCCESS","EDIT_POST_ERROR","getAllPosts","posts","getPostWithComments","mapDispatchToProps","dispatch","axios","then","res","data","payload","catch","error","addPostError","connect","postsSelectors","getIdFromProps","match","params","Post","text","isEditing","selectedPostId","handleGoBack","history","push","addComment","postId","openEditPostModal","closeEditPostModal","updatePost","_ref","editPost","fetchPostWithComment","_this$props2","comments","postContainer","comment","getComments","get","fetchPostWithCommentsError","addCommentError","updatedPost","put","editPostError","App","fetchPosts","react_router","path","exact","component","fetchPostsError","combineReducers","arguments","length","undefined","toConsumableArray","_ref2","loading","ADD_POSTS_ERROR","_ref4","_ref3","rootReducer","postsReducer","commentsReducer","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","es","basename","document","getElementById"],"mappings":"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","file":"static/js/main.9bb5f8f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Post_wrapper__dmbng\",\"postBody\":\"Post_postBody__12Ys2\",\"commentList\":\"Post_commentList__2q_qu\",\"commentItem\":\"Post_commentItem__3Vag9\",\"btnBack\":\"Post_btnBack__29XT6\",\"btn\":\"Post_btn__tbHBA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"PostEditor_formContainer__1Vqv7\",\"inputContent\":\"PostEditor_inputContent__2SBKo\",\"labelSelect\":\"PostEditor_labelSelect__SYi6a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"PostsList_list__2_Qis\",\"item\":\"PostsList_item__1kxC6\",\"link\":\"PostsList_link__2ezKU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__33VsG\",\"modal\":\"Modal_modal__11h_y\"};","import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Modal.module.css';\n\nexport default class Modal extends Component {\n  static propTypes = {\n    onClose: PropTypes.func.isRequired,\n    children: PropTypes.shape().isRequired,\n  };\n\n  backdropRef = createRef();\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyPress);\n  }\n\n  handleKeyPress = e => {\n    if (e.code !== 'Escape') return;\n\n    this.props.onClose();\n  };\n\n  handleBackdropClick = e => {\n    const { current } = this.backdropRef;\n\n    if (current && e.target !== current) {\n      return;\n    }\n\n    this.props.onClose();\n  };\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <div\n        className={css.backdrop}\n        ref={this.backdropRef}\n        onClick={this.handleBackdropClick}\n      >\n        <div className={css.modal}>{children}</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport css from './PostEditor.module.css';\n\nexport default class TaskEditor extends Component {\n  static propTypes = {\n    onSave: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n    title: PropTypes.string,\n    body: PropTypes.string,\n  };\n\n  static defaultProps = {\n    title: '',\n    body: '',\n  };\n\n  state = {\n    title: this.props.title,\n    body: this.props.body,\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSave({ ...this.state });\n\n    this.reset();\n  };\n\n  reset() {\n    this.setState({\n      title: '',\n      body: '',\n    });\n  }\n\n  render() {\n    const { title, body } = this.state;\n    const { onCancel } = this.props;\n\n    return (\n      <form className={css.formContainer} onSubmit={this.handleSubmit}>\n        <input\n          className={css.inputContent}\n          type=\"text\"\n          name=\"title\"\n          value={title}\n          onChange={this.handleChange}\n          placeholder=\"Title\"\n        />\n        <textarea\n          placeholder=\"Text\"\n          type=\"text\"\n          name=\"body\"\n          cols=\"40\"\n          rows=\"5\"\n          value={body}\n          onChange={this.handleChange}\n        />\n\n        <div>\n          <button type=\"submit\" className={css.btn}>\n            Save\n          </button>\n          <button type=\"button\" className={css.btn} onClick={onCancel}>\n            Cancel\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Modal from '../Modal/Modal';\nimport PostEditor from '../PostEditor/PostEditor';\nimport css from './PostsList.module.css';\n\nclass PostsList extends Component {\n  static propTypes = {\n    addPost: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(PropTypes.shape().isRequired).isRequired,\n    location: PropTypes.shape().isRequired,\n  };\n\n  state = {\n    isCreating: false,\n  };\n\n  // Create post\n\n  openCreatePostModal = () => {\n    this.setState({ isCreating: true });\n  };\n\n  closeCreatePostModal = () => {\n    this.setState({ isCreating: false });\n  };\n\n  createPost = post => {\n    const { addPost } = this.props;\n    const postToAdd = {\n      ...post,\n    };\n\n    addPost(postToAdd);\n\n    this.closeCreatePostModal();\n  };\n\n  render() {\n    const { items = [], location } = this.props;\n    const { isCreating } = this.state;\n    return (\n      <>\n        <h2>Posts</h2>\n        <ul className={css.list}>\n          {items.map(\n            item =>\n              item.title && (\n                <li key={item.id} className={css.item}>\n                  <Link\n                    to={{\n                      pathname: `/posts/${item.id}`,\n                      state: { from: location },\n                    }}\n                    className={css.link}\n                  >\n                    {item.title}\n                  </Link>\n                </li>\n              ),\n          )}\n        </ul>\n        <button type=\"button\" onClick={this.openCreatePostModal}>\n          Create Post\n        </button>\n        {isCreating && (\n          <Modal onClose={this.closeCreatePostModal}>\n            <PostEditor\n              onSave={this.createPost}\n              onCancel={this.closeCreatePostModal}\n            />\n          </Modal>\n        )}\n      </>\n    );\n  }\n}\n\nexport default PostsList;\n","export const ActionType = {\n  FETCH_POSTS_REQUEST: 'FETCH_POSTS_REQUEST',\n  FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\n  FETCH_POSTS_ERROR: 'FETCH_POSTS_ERROR',\n  FETCH_POST_WITH_COMMENTS_REQUEST: 'FETCH_POST_WITH_COMMENTS_REQUEST',\n  FETCH_POST_WITH_COMMENTS_SUCCESS: 'FETCH_POST_WITH_COMMENTS_SUCCESS',\n  FETCH_POST_WITH_COMMENTS_ERROR: 'FETCH_POST_WITH_COMMENTS_ERROR',\n  ADD_POST_REQUEST: 'ADD_POST_REQUEST',\n  ADD_POST_SUCCESS: 'ADD_POST_SUCCESS',\n  ADD_POST_ERROR: 'ADD_POST_ERROR',\n  EDIT_POST_REQUEST: 'EDIT_POST_REQUEST',\n  EDIT_POST_SUCCESS: 'EDIT_POST_SUCCESS',\n  EDIT_POST_ERROR: 'EDIT_POST_ERROR',\n};\n\n// FETCH_POSTS\n\nexport const fetchPostsRequest = () => ({\n  type: ActionType.FETCH_POSTS_REQUEST,\n});\n\nexport const fetchPostsSuccess = posts => ({\n  type: ActionType.FETCH_POSTS_SUCCESS,\n  payload: {\n    posts,\n  },\n});\n\nexport const fetchPostsError = error => ({\n  type: ActionType.FETCH_POSTS_ERROR,\n  payload: {\n    error,\n  },\n});\n\n// FETCH_POST_WITH_COMMENTS\n\nexport const fetchPostWithCommentsRequest = () => ({\n  type: ActionType.FETCH_POST_WITH_COMMENTS_REQUEST,\n});\n\nexport const fetchPostWithCommentsSuccess = post => ({\n  type: ActionType.FETCH_POST_WITH_COMMENTS_SUCCESS,\n  payload: {\n    post,\n  },\n});\n\nexport const fetchPostWithCommentsError = error => ({\n  type: ActionType.FETCH_POST_WITH_COMMENTS_ERROR,\n  payload: {\n    error,\n  },\n});\n\n// ADD_POST\n\nexport const addPostRequest = () => ({\n  type: ActionType.ADD_POST_REQUEST,\n});\n\nexport const addPostSuccess = post => ({\n  type: ActionType.ADD_POST_SUCCESS,\n  payload: {\n    post,\n  },\n});\n\nexport const addPostError = error => ({\n  type: ActionType.ADD_POST_ERROR,\n  payload: {\n    error,\n  },\n});\n\n// EDIT_POST\n\nexport const editPostRequest = () => ({\n  type: ActionType.EDIT_POST_REQUEST,\n});\n\nexport const editPostSuccess = (id, updatedPost) => ({\n  type: ActionType.EDIT_POST_SUCCESS,\n  payload: {\n    id,\n    updatedPost,\n  },\n});\n\nexport const editPostError = error => ({\n  type: ActionType.EDIT_POST_ERROR,\n  payload: {\n    error,\n  },\n});\n","export const getAllPosts = state => state.posts.items;\n\nexport const getPostWithComments = state => state.posts.item;\n","import { connect } from 'react-redux';\nimport PostsList from './PostsList';\nimport * as postsOperations from '../../redux/posts/postsOperations';\nimport * as postsSelectors from '../../redux/posts/postsSelectors';\n\nconst mapStateToProps = state => ({\n  items: postsSelectors.getAllPosts(state),\n});\n\nconst mapDispatchToProps = {\n  addPost: postsOperations.addPost,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostsList);\n","import axios from 'axios';\nimport {\n  fetchPostsRequest,\n  fetchPostsSuccess,\n  fetchPostsError,\n  fetchPostWithCommentsRequest,\n  fetchPostWithCommentsSuccess,\n  fetchPostWithCommentsError,\n  addPostRequest,\n  addPostSuccess,\n  addPostError,\n  editPostRequest,\n  editPostSuccess,\n  editPostError,\n} from './postsActions';\n\nexport const fetchPosts = () => dispatch => {\n  dispatch(fetchPostsRequest());\n  axios\n    .get('https://simple-blog-api.crew.red/posts')\n    .then(res => {\n      dispatch(fetchPostsSuccess(res.data));\n    })\n    .catch(error => {\n      dispatch(fetchPostsError(error));\n    });\n};\n\nexport const fetchPostWithComment = id => dispatch => {\n  dispatch(fetchPostWithCommentsRequest());\n\n  axios\n    .get(`https://simple-blog-api.crew.red/posts/${id}?_embed=comments`)\n    .then(res => {\n      dispatch(fetchPostWithCommentsSuccess(res.data));\n    })\n    .catch(error => {\n      dispatch(fetchPostWithCommentsError(error));\n    });\n};\n\nexport const addPost = post => dispatch => {\n  dispatch(addPostRequest());\n\n  axios\n    .post('https://simple-blog-api.crew.red/posts', post)\n    .then(res => {\n      dispatch(addPostSuccess(res.data));\n    })\n    .catch(error => {\n      dispatch(addPostError(error));\n    });\n};\n\nexport const editPost = (id, updatedPost) => dispatch => {\n  dispatch(editPostRequest());\n\n  axios\n    .put(`https://simple-blog-api.crew.red/posts/${id}`, updatedPost)\n    .then(res => {\n      dispatch(editPostSuccess(res.data));\n    })\n    .catch(error => {\n      dispatch(editPostError(error));\n    });\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from '../Modal/Modal';\nimport PostEditor from '../PostEditor/PostEditor';\nimport css from './Post.module.css';\n\nconst getIdFromProps = props => props.match.params.id;\n\nclass Post extends Component {\n  static propTypes = {\n    fetchPostWithComment: PropTypes.func.isRequired,\n    addComment: PropTypes.func.isRequired,\n    history: PropTypes.shape().isRequired,\n    location: PropTypes.shape().isRequired,\n    items: PropTypes.shape().isRequired,\n    comments: PropTypes.arrayOf(PropTypes.shape().isRequired).isRequired,\n    editPost: PropTypes.func.isRequired,\n  };\n\n  state = {\n    text: '',\n    isEditing: false,\n    selectedPostId: null,\n  };\n\n  componentDidMount() {\n    const { fetchPostWithComment } = this.props;\n    const id = getIdFromProps(this.props);\n\n    this.setState({\n      selectedPostId: id,\n    });\n\n    fetchPostWithComment(id);\n  }\n\n  handleGoBack = () => {\n    const { history, location } = this.props;\n    if (location.state) {\n      return history.push(location.state.from);\n    }\n\n    return history.push('/');\n  };\n\n  handleChange = e => {\n    this.setState({\n      text: e.target.value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { addComment } = this.props;\n    const { text } = this.state;\n    const comment = {\n      postId: getIdFromProps(this.props),\n      body: text,\n    };\n    addComment(comment);\n    this.reset();\n  };\n\n  // Update post\n\n  openEditPostModal = () => {\n    this.setState({\n      isEditing: true,\n    });\n  };\n\n  closeEditPostModal = () => {\n    this.setState({\n      isEditing: false,\n    });\n  };\n\n  updatePost = ({ title, body }) => {\n    const { editPost } = this.props;\n    const { selectedPostId } = this.state;\n\n    editPost(selectedPostId, { title, body });\n\n    this.closeEditPostModal();\n  };\n\n  reset = () => {\n    this.setState({\n      text: '',\n    });\n  };\n\n  render() {\n    const { items, comments } = this.props;\n    const { text, isEditing } = this.state;\n\n    return (\n      <article className={css.wrapper}>\n        <button\n          type=\"button\"\n          className={css.btnBack}\n          onClick={this.handleGoBack}\n        >\n          Go back\n        </button>\n        <button type=\"button\" onClick={this.openEditPostModal}>\n          Edit\n        </button>\n        <div className={css.postContainer}>\n          <h2>{items.title}</h2>\n          <p className={css.postBody}>{items.body}</p>\n          <ul className={css.commentList}>\n            {items.comments &&\n              items.comments.map(comment => (\n                <li key={comment.id} className={css.commentItem}>\n                  {comment.body}\n                </li>\n              ))}\n            {comments &&\n              comments.map(comment => (\n                <li key={comment.id} className={css.commentItem}>\n                  {comment.body}\n                </li>\n              ))}\n          </ul>\n          <form onSubmit={this.handleSubmit}>\n            <textarea\n              type=\"text\"\n              name=\"text\"\n              cols=\"50\"\n              rows=\"5\"\n              value={text}\n              onChange={this.handleChange}\n            />\n            <button type=\"submit\" className={css.btn}>\n              Add comment\n            </button>\n          </form>\n        </div>\n\n        {isEditing && (\n          <Modal onClose={this.closeEditPostModal}>\n            <PostEditor\n              onSave={this.updatePost}\n              onCancel={this.closeEditPostModal}\n              title={items.title}\n              body={items.body}\n            />\n          </Modal>\n        )}\n      </article>\n    );\n  }\n}\n\nexport default Post;\n","export const ActionType = {\n  ADD_COMMENT_REQUEST: 'ADD_COMMENT_REQUEST',\n  ADD_COMMENT_SUCCESS: 'ADD_COMMENT_SUCCESS',\n  ADD_COMMENT_ERROR: 'ADD_COMMENT_ERROR',\n};\n\n// ADD_COMMENT\n\nexport const addCommentRequest = () => ({\n  type: ActionType.ADD_COMMENT_REQUEST,\n});\n\nexport const addCommentSuccess = comment => ({\n  type: ActionType.ADD_COMMENT_SUCCESS,\n  payload: {\n    comment,\n  },\n});\n\nexport const addCommentError = error => ({\n  type: ActionType.ADD_COMMENT_ERROR,\n  payload: {\n    error,\n  },\n});\n","export const getComments = state => state.comments.items;\n\n// DUMMY\nexport const dummy = () => null;\n","import { connect } from 'react-redux';\nimport Post from './Post';\nimport * as postsOperations from '../../redux/posts/postsOperations';\nimport * as commentsOperations from '../../redux/comments/commentsOperations';\nimport * as postsSelectors from '../../redux/posts/postsSelectors';\nimport { getComments } from '../../redux/comments/commentsSelectors';\n\nconst mapStateToProps = state => ({\n  items: postsSelectors.getPostWithComments(state),\n  comments: getComments(state),\n});\n\nconst mapDispatchToProps = {\n  fetchPostWithComment: postsOperations.fetchPostWithComment,\n  addComment: commentsOperations.addComment,\n  editPost: postsOperations.editPost,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Post);\n","import axios from 'axios';\nimport {\n  addCommentRequest,\n  addCommentSuccess,\n  addCommentError,\n} from './commentsActions';\n\nexport const addComment = comment => dispatch => {\n  dispatch(addCommentRequest());\n\n  axios\n    .post('https://simple-blog-api.crew.red/comments', comment)\n    .then(res => {\n      dispatch(addCommentSuccess(res.data));\n    })\n    .catch(error => {\n      dispatch(addCommentError(error));\n    });\n};\n\n// DUMMY\nexport const dummy = () => null;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route } from 'react-router-dom';\nimport PostsList from './PostsList/PostsListContainer';\nimport Post from './Post/PostContainer';\nimport * as postsOperations from '../redux/posts/postsOperations';\n\nclass App extends Component {\n  componentDidMount() {\n    const { fetchPosts } = this.props;\n\n    fetchPosts();\n  }\n\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route path=\"/\" exact component={PostsList} />\n          <Route path=\"/posts/:id\" component={Post} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchPosts: postsOperations.fetchPosts,\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(App);\n","import { combineReducers } from 'redux';\nimport { ActionType } from './postsActions';\n\nconst itemsReducer = (state = [], { type, payload }) => {\n  switch (type) {\n    case ActionType.FETCH_POSTS_SUCCESS:\n      return payload.posts;\n\n    case ActionType.ADD_POST_SUCCESS:\n      return [...state, payload.post];\n\n    case ActionType.EDIT_POST_SUCCESS:\n      return state.map(post =>\n        post.id === payload.id ? payload.updatedPost : post,\n      );\n\n    default:\n      return state;\n  }\n};\n\nconst itemReducer = (state = {}, { type, payload }) => {\n  switch (type) {\n    case ActionType.FETCH_POST_WITH_COMMENTS_SUCCESS:\n      return payload.post;\n\n    default:\n      return state;\n  }\n};\n\nconst loadingReducer = (state = false, { type }) => {\n  switch (type) {\n    case ActionType.FETCH_POSTS_REQUEST:\n    case ActionType.FETCH_POST_WITH_COMMENTS_REQUEST:\n    case ActionType.ADD_POST_REQUEST:\n    case ActionType.EDIT_POST_REQUEST:\n      return true;\n\n    case ActionType.FETCH_POSTS_SUCCESS:\n    case ActionType.FETCH_POSTS_ERROR:\n    case ActionType.FETCH_POST_WITH_COMMENTS_SUCCESS:\n    case ActionType.FETCH_POST_WITH_COMMENTS_ERROR:\n    case ActionType.ADD_POST_SUCCESS:\n    case ActionType.ADD_POSTS_ERROR:\n    case ActionType.EDIT_POST_SUCCESS:\n    case ActionType.EDIT_POST_ERROR:\n      return false;\n\n    default:\n      return state;\n  }\n};\n\nconst errorReducer = (state = null, { type, payload }) => {\n  switch (type) {\n    case ActionType.FETCH_POSTS_REQUEST:\n    case ActionType.FETCH_POST_WITH_COMMENTS_REQUEST:\n    case ActionType.ADD_POST_REQUEST:\n    case ActionType.EDIT_POST_REQUEST:\n      return null;\n\n    case ActionType.FETCH_POSTS_ERROR:\n    case ActionType.FETCH_POST_WITH_COMMENTS_ERROR:\n    case ActionType.ADD_POSTS_ERROR:\n    case ActionType.EDIT_POST_ERROR:\n      return payload.error;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  items: itemsReducer,\n  item: itemReducer,\n  loading: loadingReducer,\n  error: errorReducer,\n});\n","import { combineReducers } from 'redux';\nimport { ActionType } from './commentsActions';\n\nconst commentsReducer = (state = [], { type, payload }) => {\n  switch (type) {\n    case ActionType.ADD_COMMENT_SUCCESS:\n      return [...state, payload.comment];\n\n    default:\n      return state;\n  }\n};\n\nconst loadingReducer = (state = false, { type }) => {\n  switch (type) {\n    case ActionType.ADD_COMMENT_REQUEST:\n      return true;\n\n    case ActionType.ADD_COMMENT_SUCCESS:\n    case ActionType.ADD_COMMENT_ERROR:\n      return false;\n\n    default:\n      return state;\n  }\n};\n\nconst errorReducer = (state = null, { type, payload }) => {\n  switch (type) {\n    case ActionType.ADD_COMMENT_REQUEST:\n      return null;\n\n    case ActionType.ADD_COMMENT_ERROR:\n      return payload.error;\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  items: commentsReducer,\n  loading: loadingReducer,\n  error: errorReducer,\n});\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport ReduxThunk from 'redux-thunk';\nimport postsReducer from './posts/postsReducers';\nimport commentsReducer from './comments/commentsReducers';\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  comments: commentsReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(ReduxThunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport App from './components/App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter basename=\"/\">\n      <Route component={App} />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}